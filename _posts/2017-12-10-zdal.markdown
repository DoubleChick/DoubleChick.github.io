---
layout:     post
title:      "ZDAL-分布式数据存储框架"
subtitle:   "数据拆分"
date:       2017-12-16 13:30:00
author:     "ZJF"
header-img: "img/post-bg-unix-linux.jpg"
catalog: false
tags:
    - 蚂蚁中间件
---

## ZDAL概念

JDBC(Java DataBase Connectivity)是一组由Java编写的类和接口集
* 封装了与多种数据库的连接实现,提供标准化的接口
* 通过JDBC访问数据库可以专注于SQL逻辑而不需要为每一个数据库创建一套连接程序

ZDAL是一个基于JDBC的`分布式`数据存储框架,结合一个问题概要的介绍一下ZDAL的功能

`ZDAL和ORM框架(iBatis、Hibernate等)的区别?`
* ZDAL在JDBC的数据库连接基础之上`采用分布式架构`提供数据拆分、数据源弹性伸缩、流量分发等功能
来解决传统单库单表存储的`容量性能瓶颈`以及在海量吞吐场景下提供`更安全稳定的数据层服务`
* ORM框架主要使用元数据(XML中的声明)建立数据库记录与Java对象之间的映射关系,将对数据库记录的操作转化为对内存对象的操作
* 个人感觉ZDAL主要解决性能安全问题,ORM框架主要为生成SQL以及数据库记录以及内存对象转换提供便利,两者互不依赖可单独使用

本人在项目中使用的是 Sofa4 + ZDAL4 + iBatis 架构
本文主要在数据拆分、分布式Sequence、与ORM集成三个方面介绍ZDAL

ZDAL架构图一览
![img](/img/in-post/zdal-architecture.jpg)

## 数据拆分
在单库不分表的场景下,数据量的增大很容易产生数据库的性能问题
* 例如单表存储1000w记录,查询会非常耗时
* 数据太大也会对单台机器的容量产生压力,从而影响性能

ZDAL的分布式的存储架构解决了单库的容量瓶颈以及单表的性能瓶颈

Tip:ZDAL和ORM框架(iBatis)的区别
* 
* 


我在项目中使用的是Sofa4集成ZDAL和iBatis,接下来结合相关配置进行介绍

Sofa框架提供了对ZDAL的集成和支持,可以使用sofa标签声明配置源
```XML
	<!-- 数据源 -->
	<sofa:zdal-jdbc id="bkxxxDataSource">
		<sofa:appDataSourceName value="bkxxxApplicationDataSource" />
	</sofa:zdal-jdbc>
```

```XML
	<bean id="bkxxx" class="com.alipay.zdal.client.config.bean.ZdalAppBean">
		<property name="appName" value="bkxxx" />
		<property name="dbmode" value="stable" />
		<property name="idcName" value="gz00" />
		<property name="appDataSourceList">
			<list>
				<ref bean="bkxxxApplicationDataSource" />
			</list>
		</property>
	</bean>
```

```XML
<bean id="bkxxxApplicationDataSource" class="com.alipay.zdal.client.config.bean.AppDataSourceBean">
		<property name="appDataSourceName" value="bkxxxApplicationDataSource" />
		<property name="dataBaseType" value="MYSQL" />
		<property name="zoneError" value="EXCEPTION" />
		<property name="appRule" ref="bkxxxApplicationDataSourceRule" />
		<property name="physicalDataSourceSet">
			<set>
				<ref bean="bkxxxDataSourcePhysics" />
			</set>
		</property>
		<property name="groupDataSourceRuleMap">
			<map>
				<entry key="group_0" value="bkxxx_ds:r10w10" />
			</map>
		</property>
	</bean>
```

```XML
<bean id="bkxxxDataSourcePhysics"
		  class="com.alipay.zdal.client.config.bean.PhysicalDataSourceBean">
		<property name="name" value="bkxxxDataSourcePhysics" />
		<property name="type" value="MYSQL" />
		<property name="jdbcUrl">
			<value><![CDATA[jdbc:mysql://dev3.mysql.alibank.net:3306/bkxxx?useUnicode=true&amp;characterEncoding=utf8]]></value>
		</property>
		<property name="userName" value="bkxxx" />
		<property name="password" value="6058184bc19f14aa0bf3cb262721f0df" />
		<property name="minConn" value="10" />
		<property name="maxConn" value="15" />
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="blockingTimeoutMillis" value="5000" />
		<property name="idleTimeoutMinutes" value="30" />
		<property name="preparedStatementCacheSize" value="100" />
		<property name="queryTimeout" value="180" />
		<property name="prefill" value="false" />
		<property name="maxReadThreshold" value="100" />
		<property name="maxWriteThreshold" value="100" />
		<property name="logicDbNameSet">
			<set>
				<value><![CDATA[bkxxx_ds]]></value>
			</set>
		</property>
	</bean>
```

```XML
	<bean id="bkxxxApplicationDataSourceRule" class="com.alipay.zdal.rule.config.beans.AppRule"
		  init-method="init">
		<property name="masterRule" ref="bkxxxApplicationDataSourceElasticRule" />
	</bean>
```

```XML
<bean id="bkxxxApplicationDataSourceElasticRule" class="com.alipay.zdal.rule.config.beans.ShardRule">
		<property name="dbtype" value="MYSQL" />
		<property name="tableRules">
			<map>
				<entry key="bkxxx_table" value-ref="bkxxx_table_rule" />
			</map>
		</property>
</bean>
```

```XML
<bean id="bkxxx_table_rule" class="com.alipay.zdal.rule.config.beans.TableRule" init-method="init">
		<property name="logicTableName" value="bkxxx_table" />
		<property name="tbSuffix">
			<value><![CDATA[groovyThroughAllDBTableList:def list = [];(0..19).each{ i ->list.add("0"+"${i}".padLeft(3,"0") );}; return list;]]></value>
		</property>
		<property name="dbIndexes">
			<value><![CDATA[bkxxx_ds]]></value>
		</property>
		<property name="tbRuleArray">
			<list>
				<value><![CDATA[return com.mybank.bkxxx.common.dal.parseTableIndexMethod(业务字段).padLeft(4,"0");]]></value>
			</list>
		</property>
		<property name="dbRuleList">
			<list>
				<value><![CDATA[ if(null != #id#) return 0;]]></value>
			</list>
		</property>
	</bean>
```