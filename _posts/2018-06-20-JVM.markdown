---
layout:     post
title:      "JVM小记(一)"
subtitle:   "内存管理|GC|"
date:       2018-06-20 13:30:00
author:     "ZJF"
header-img: "img/post-bg-unix-linux.jpg"
catalog: false
tags:
    - JVM原理
---
Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”,墙外面的人想进去,墙里面的人却想出来.---《深入理解Java虚拟机》

Java的内存是由虚拟机自动管理的,这为我们带来了便捷,但我们也需要去了解虚拟机是如何工作的,以便发生问题时可以有效的排查
## Java内存区域
首先介绍一下JVM运行时数据区域,也就是人们常说的Java内存模型,需要注意的是各个区域的功能主要是基于Java虚拟机的规范,不同的虚拟机实现会有不同,以及在物理存储介质上并没有这样的分区划分

`程序计数器`(Program Counter Register)
* 线程私有,存储当前线程所执行的字节码行号指示器,内存占用空间很小
* 唯一一个在虚拟机规范中没有规定任何OutOfMemoryError的区域

说得简单点就是记录各个线程的指令执行到哪了,在多线程的场景下,维护代码执行顺序的正确性

`Java虚拟机栈`(Stacks)
* 线程私有,存储Java方法执行的内存模型,生命周期与线程相同
* 方法从调用到执行完成,对应着栈帧从入栈到出栈

每个方法在执行时都会创建一个栈帧,里面存着储局部变量表以及其他一些数据,重点说一下局部变量表
局部变量表存放了各种基本数据类型,对象引用以及returnAddress类型(一条字节码指令的地址),我们常说的对象引用存在栈内就是说的这里,局部变量所需的空间会在编译器完成分配(确定)

`本地方法栈`(Native Method Stack)
* 与虚拟机栈相似,区别是本地方法栈为Native方法提供服务

虚拟机中对于本地方法栈的规范中并没有严格的要求,不同的虚拟机可以有更自由的实现,像Sun HotSpot虚拟机中就将Java虚拟机栈和本地方法栈合二为一

`Java堆(Heap)`
* 多线程共享,虚拟机启动时创建,几乎所有的对象实例都在堆内分配内存
* 严格来说堆中会划分出线程私有的分配缓冲区(Thread Local Allocation Buffer)

虚拟机中的GC环节主要就是针对这个区域进行的,后半部分会介绍GC的整个过程

`方法区`(Method Area)
* 多线程共享,存储类信息(字段、方法、接口等)、常量、静态变量

Java虚拟机规范中方法区被描述为堆的一个逻辑部分,但从大家对内存模型的理解上,更多的是愿意将方法区从堆中区分出来

`运行时常量池`(RUntime Constant Pool)
* 多线程共享,是方法区的一部分,存放编译期生成的各种字面量和符号引用

简单的理解就是存放我们Java程序中的常量值,像String这种,需要注意的是并不是编译之后常量池就不变了,像String类的intern()方法就是一种在运行时向常量池新增常量的一种方式

## 

```java
	
```

















