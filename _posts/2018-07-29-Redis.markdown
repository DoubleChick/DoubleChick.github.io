---
layout:     post
title:      "Redis查缺补漏"
subtitle:   "单进程单线程"
date:       2018-07-29 13:30:00
author:     "ZJF"
header-img: "img/post-bg-unix-linux.jpg"
catalog: false
tags:
    - DB
---

最近面试的时候被问到Redis为何在单线程的模型下也能保持高吞吐量..？

现在来通过这个问题对这一块知识进行查缺补漏╮(￣▽￣"")╭

首先将这个问题分解为两个问题

## Redis为什么使用单线程模型？
说实话在仔细梳理了相关知识之后再回来看这个问题，会觉得这种问法有点误导，好像不使用多线程而使用单线程性能一定会变差

`误区就是认为多线程比单线程效率高`

温习一下最开始学习多线程是为了解决什么问题呢？在单核单线程的场景下，外部的一些耗时操作（IO、RPC服务的处理速度较慢）会拖住当前线程，CPU在等待当前线程的执行结果，无法为其他操作提供服务

单核多线程解决了上述的问题，可以通过“模拟多核”的方式提高CPU的利用率，相应的副作用就是线程间的上下文切换会产生额外的耗时，但在我们日常的开发中一般会有MySQL这种关系型数据库存在，所以这种场景下使用多线程是比较合理的，也确实会提升效率的

但Redis是一种基于内存的KV数据库，单线程指定操作一块内存空间，CPU与内存的读写操作会快很多，所以单核场景下Redis不依赖多线程，反而单线程能减少不必要的上下文切换开销

--- 多核多线程场景 --- 

假设线程数不超过CPU核数，理想化没有线程切换开销，是不是多一个核就快了一倍呢？

对于数据读取的场景也不是的，因为这种并发场景下需要对数据操作进行适当的同步机制，并且Redis支持的数据结构会更复杂，更需要同步机制的保护

同步的副作用就是多线程之间的竞争，这也是额外的开销，并且结合业务场景的同步，会让使用Redis变得更复杂

总结---Redis使用单线程的原因：
1.基于内存的数据读写很快
2.可以避免线程上下文切换的开销
3.可以减少数据同步的复杂性

并且可以同时开启多个Redis服务来弥补多核场景下的性能

所以这样看来，Redis并不是迫不得已使用了单线程，再通过其他手段提高性能，而是在选择单线程与多线程的时候就结合了自身特性进行了考虑，我反而觉得正是因为使用了单线程才提升了性能

## Redis如何保持高吞吐量？
除了上述的优势之外，Redis还通过哪些方式提升了性能呢？





















